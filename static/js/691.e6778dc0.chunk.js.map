{"version":3,"file":"static/js/691.e6778dc0.chunk.js","mappings":"wSAAMA,EAAQC,EAAQ,MAEtBD,EAAME,SAASC,QAAU,+BAEzB,IAAMC,EAAM,mCAECC,EAAgB,mCAAG,oGACRL,EAAMM,IAAN,sCAAyCF,IADjC,cACxBG,EADwB,yBAEvBA,EAAQC,KAAKC,SAFU,2CAAH,qDAKhBC,EAAc,mCAAG,WAAMC,GAAN,uFACNX,EAAMM,IAAN,+BACIF,EADJ,iCACgCO,EADhC,gCADM,cACtBJ,EADsB,yBAIrBA,EAAQC,KAAKC,SAJQ,2CAAH,sDAOdG,EAAmB,mCAAG,WAAMC,GAAN,uFACXb,EAAMM,IAAN,gBAAmBO,EAAnB,oBAAiCT,EAAjC,oBADW,cAC3BG,EAD2B,yBAE1BA,EAAQC,MAFkB,2CAAH,sDAKnBM,EAAe,mCAAG,WAAMD,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAKO,MAJS,2CAAH,sDAOfC,EAAe,mCAAG,WAAMH,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAKC,SAJS,2CAAH,qD,mHC3BfQ,EAAQC,EAAAA,GAAAA,GAAH,oEAKLC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,4O,iMCNRG,EAAQH,EAAAA,GAAAA,MAAH,yPAaLI,EAAeJ,EAAAA,GAAAA,OAAH,uS,SCmDzB,EAvDe,WACb,IAAMK,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAoCC,EAAAA,EAAAA,MAApC,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAYF,EAAWvB,IAAI,UAEjC0B,EAAAA,EAAAA,YAAU,WACHD,GAILrB,EAAAA,EAAAA,IAAeqB,GACZE,MAAK,SAAAC,GACJ,GAAmB,IAAfA,EAAIC,OAGN,OAFAR,EAAU,SACVS,EAAAA,GAAAA,MAAA,yBAA8BL,IAIhCJ,GAAU,OAAIO,GACf,IACAG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IAbVX,EAAU,GAcb,GAAE,CAACI,IAYJ,OACE,UAACU,EAAA,EAAD,CAAKC,EAAE,OAAP,WACE,kBAAMC,SAZM,SAAAC,GACdA,EAAEC,iBACF,IAAMlC,EAAQiC,EAAEE,cAAcnC,MAAMoC,MAAMC,OAC5B,KAAVrC,EAIJmB,EAAwB,KAAVnB,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAHxCyB,EAAAA,GAAAA,MAAY,yBAIf,EAIG,WACE,SAACf,EAAD,CAAO4B,KAAK,OAAOC,KAAK,WACxB,UAAC5B,EAAD,CAAc2B,KAAK,SAAnB,WACE,SAAC,MAAD,IADF,eAKDvB,EAAOS,OAAS,GACfT,EAAOyB,KAAI,gBAAGtC,EAAH,EAAGA,GAAIuC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,IAAD,CAAUC,GAAE,kBAAaxC,GAAMyC,MAAO,CAAEC,KAAMhC,GAA9C,SACG6B,KAFIvC,EADA,MASlB,C","sources":["fetchAPI.jsx","pages/Home/Home.styled.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["const axios = require('axios');\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '025e6ba837c180b1375a1753437eaffc';\n\nexport const getTrendingFilms = async () => {\n  const respons = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return respons.data.results;\n};\n\nexport const getSearchFilms = async query => {\n  const respons = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return respons.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const respons = await axios.get(`movie/${id}?api_key=${KEY}&language=en-US`);\n  return respons.data;\n};\n\nexport const getMovieCredits = async id => {\n  const respons = await axios.get(\n    `movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const respons = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.results;\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-top: 8px;\n  margin-bottom: 12px;\n`;\n\nexport const NavLinks = styled(NavLink)`\n  color: #020f3e;\n  letter-spacing: 1px;\n  line-height: 1.4;\n  text-decoration: none;\n  padding: 4px;\n  :focus,\n  :hover {\n    color: #ad0b91;\n    background-color: #d3cbcb;\n    border-radius: 4px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 6px;\n  color: black;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  border-radius: 4px;\n  outline: none;\n  border: 1px solid black;\n  :focus {\n    box-shadow: 1px 1px 24px 0px rgba(113, 160, 160, 1);\n  }\n`;\n\nexport const ButtonSearch = styled.button`\n  display: inline-flex;\n  align-item: center;\n  justify-content: center;\n  min-width: 80px;\n  padding: 5px;\n  background-color: #f3e6e6;\n  border-radius: 4px;\n  border: 1px solid black;\n  cursor: pointer;\n  :focus,\n  :hover {\n    background-color: gray;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchFilms } from '../../fetchAPI';\nimport { useLocation } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { NavLinks } from '../../pages/Home/Home.styled';\nimport { FcSearch } from 'react-icons/fc';\nimport { Box } from 'components/Box';\nimport { Input, ButtonSearch } from './Movies.styled';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [queryParam, setQueryParam] = useSearchParams();\n  const queryFilm = queryParam.get('query');\n\n  useEffect(() => {\n    if (!queryFilm) {\n      setMovies([]);\n      return;\n    }\n    getSearchFilms(queryFilm)\n      .then(res => {\n        if (res.length === 0) {\n          setMovies([]);\n          toast.error(`Not found film ${queryFilm}`);\n          return;\n        }\n\n        setMovies([...res]);\n      })\n      .catch(err => console.error(err));\n  }, [queryFilm]);\n\n  const onQuery = e => {\n    e.preventDefault();\n    const query = e.currentTarget.query.value.trim();\n    if (query === '') {\n      toast.error('Please enter film name');\n      return;\n    }\n    setQueryParam(query !== '' ? { query } : {});\n  };\n\n  return (\n    <Box m=\"15px\">\n      <form onSubmit={onQuery}>\n        <Input type=\"text\" name=\"query\" />\n        <ButtonSearch type=\"submit\">\n          <FcSearch />\n          Search\n        </ButtonSearch>\n      </form>\n      {movies.length > 0 &&\n        movies.map(({ id, title }) => (\n          <li key={id}>\n            <NavLinks to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </NavLinks>\n          </li>\n        ))}\n    </Box>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","require","defaults","baseURL","KEY","getTrendingFilms","get","respons","data","results","getSearchFilms","query","getMovieDetailsById","id","getMovieCredits","cast","getMovieReviews","Title","styled","NavLinks","NavLink","Input","ButtonSearch","location","useLocation","useState","movies","setMovies","useSearchParams","queryParam","setQueryParam","queryFilm","useEffect","then","res","length","toast","catch","err","console","error","Box","m","onSubmit","e","preventDefault","currentTarget","value","trim","type","name","map","title","to","state","from"],"sourceRoot":""}