{"version":3,"file":"static/js/736.e7e82d7b.chunk.js","mappings":"6QAEaA,EAAMC,EAAAA,GAAAA,IAAH,yCAGHC,EAAOD,EAAAA,GAAAA,GAAH,kGAMJE,EAAWF,EAAAA,GAAAA,GAAH,mEAKRG,EAAOH,EAAAA,GAAAA,EAAH,wC,kBC6CjB,EApDa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BH,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACHJ,IAGLG,EAAU,YACVE,EAAAA,EAAAA,IAAgBL,GACbM,MAAK,SAAAC,GACJR,EAAQQ,GACRJ,EAAU,SACX,IACAK,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAlB,IACb,GAAE,CAACT,KAEF,UAACY,EAAA,EAAD,CAAKC,QAAQ,OAAb,UACc,YAAXX,IAAwB,SAACY,EAAA,EAAD,KACZ,WAAXZ,GAAkC,YAAXA,IAAyBJ,IAChD,UAACJ,EAAD,WACGI,EAAKiB,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACrC,OACE,UAACxB,EAAD,YACE,SAACH,EAAD,CACE4B,IACED,EAAY,0CAC2BA,GACnCE,EAENC,IAAKL,KAEP,SAACrB,EAAD,WACE,uBAAIsB,OAEN,UAACtB,EAAD,YACE,uCACCqB,OAdUD,EAkBlB,IACiB,KAAb,OAAJlB,QAAI,IAAJA,OAAA,EAAAA,EAAMyB,UACL,yEAMX,C,6ECzDYT,EAAS,kBACpB,SAAC,KAAD,CACEU,QAAQ,OACRC,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CAAEC,WAAY,OAAQhB,QAAS,QAASiB,YAAa,QACnEC,aAAa,eAPK,C,wLCFhBC,EAAQC,EAAQ,MAEtBD,EAAME,SAASC,QAAU,+BAEzB,IAAMC,EAAM,mCAECC,EAAgB,mCAAG,oGACRL,EAAMM,IAAN,sCAAyCF,IADjC,cACxBG,EADwB,yBAEvBA,EAAQC,KAAKC,SAFU,2CAAH,qDAKhBC,EAAc,mCAAG,WAAMC,GAAN,uFACNX,EAAMM,IAAN,+BACIF,EADJ,iCACgCO,EADhC,gCADM,cACtBJ,EADsB,yBAIrBA,EAAQC,KAAKC,SAJQ,2CAAH,sDAOdG,EAAmB,mCAAG,WAAMC,GAAN,uFACXb,EAAMM,IAAN,gBAAmBO,EAAnB,oBAAiCT,EAAjC,oBADW,cAC3BG,EAD2B,yBAE1BA,EAAQC,MAFkB,2CAAH,sDAKnBnC,EAAe,mCAAG,WAAMwC,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAK1C,MAJS,2CAAH,sDAOfgD,EAAe,mCAAG,WAAMD,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAKC,SAJS,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","fetchAPI.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\n  width: 150px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  text-align: center;\n`;\nexport const ListItem = styled.li`\n  width: 150px;\n  list-style-type: none;\n`;\n\nexport const Text = styled.p`\n  margin: 6px;\n`;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Box } from '../Box';\nimport { getMovieCredits } from '../../fetchAPI';\nimport { useParams } from 'react-router-dom';\nimport noImg from '../../image/image-not-available.jpg';\nimport { Img, List, ListItem, Text } from './Cast.styled';\nimport { Loader } from '../Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState('');\n  const { moviesId } = useParams();\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    if (!moviesId) {\n      return;\n    }\n    setStatus('pending');\n    getMovieCredits(moviesId)\n      .then(res => {\n        setCast(res);\n        setStatus('resolv');\n      })\n      .catch(err => console.error(err));\n  }, [moviesId]);\n  return (\n    <Box display=\"flex\">\n      {status === 'pending' && <Loader />}\n      {(status === 'resolv' || status === 'pending') && cast && (\n        <List>\n          {cast.map(({ cast_id, character, name, profile_path }) => {\n            return (\n              <ListItem key={cast_id}>\n                <Img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : noImg\n                  }\n                  alt={character}\n                />\n                <Text>\n                  <b>{name}</b>\n                </Text>\n                <Text>\n                  <b>Character: </b>\n                  {character}\n                </Text>\n              </ListItem>\n            );\n          })}\n          {cast?.length === 0 && (\n            <div>We don't have any casts for this movie</div>\n          )}\n        </List>\n      )}\n    </Box>\n  );\n};\n\nexport default Cast;\n","import { Dna } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <Dna\n    visible=\"true\"\n    height=\"80\"\n    width=\"80\"\n    ariaLabel=\"dna-loading\"\n    wrapperStyle={{ marginLeft: 'auto', display: 'block', marginRight: 'auto' }}\n    wrapperClass=\"dna-wrapper\"\n  />\n);\n","const axios = require('axios');\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '025e6ba837c180b1375a1753437eaffc';\n\nexport const getTrendingFilms = async () => {\n  const respons = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return respons.data.results;\n};\n\nexport const getSearchFilms = async query => {\n  const respons = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return respons.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const respons = await axios.get(`movie/${id}?api_key=${KEY}&language=en-US`);\n  return respons.data;\n};\n\nexport const getMovieCredits = async id => {\n  const respons = await axios.get(\n    `movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const respons = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.results;\n};\n"],"names":["Img","styled","List","ListItem","Text","useState","cast","setCast","moviesId","useParams","status","setStatus","useEffect","getMovieCredits","then","res","catch","err","console","error","Box","display","Loader","map","cast_id","character","name","profile_path","src","noImg","alt","length","visible","height","width","ariaLabel","wrapperStyle","marginLeft","marginRight","wrapperClass","axios","require","defaults","baseURL","KEY","getTrendingFilms","get","respons","data","results","getSearchFilms","query","getMovieDetailsById","id","getMovieReviews"],"sourceRoot":""}