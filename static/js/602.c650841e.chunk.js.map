{"version":3,"file":"static/js/602.c650841e.chunk.js","mappings":"wSAAMA,EAAQC,EAAQ,MAEtBD,EAAME,SAASC,QAAU,+BAEzB,IAAMC,EAAM,mCAECC,EAAgB,mCAAG,oGACRL,EAAMM,IAAN,sCAAyCF,IADjC,cACxBG,EADwB,yBAEvBA,EAAQC,KAAKC,SAFU,2CAAH,qDAKhBC,EAAc,mCAAG,WAAMC,GAAN,uFACNX,EAAMM,IAAN,+BACIF,EADJ,iCACgCO,EADhC,gCADM,cACtBJ,EADsB,yBAIrBA,EAAQC,KAAKC,SAJQ,2CAAH,sDAOdG,EAAmB,mCAAG,WAAMC,GAAN,uFACXb,EAAMM,IAAN,gBAAmBO,EAAnB,oBAAiCT,EAAjC,oBADW,cAC3BG,EAD2B,yBAE1BA,EAAQC,MAFkB,2CAAH,sDAKnBM,EAAe,mCAAG,WAAMD,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAKO,MAJS,2CAAH,sDAOfC,EAAe,mCAAG,WAAMH,GAAN,uFACPb,EAAMM,IAAN,gBACXO,EADW,4BACWT,EADX,oBADO,cACvBG,EADuB,yBAItBA,EAAQC,KAAKC,SAJS,2CAAH,qD,yHCuC5B,UA3DsB,WAAO,IAAD,IACpBQ,GAAQC,EAAAA,EAAAA,MACd,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACTC,EAAgEJ,EAAhEI,YAAaC,EAAmDL,EAAnDK,eAAgBC,EAAmCN,EAAnCM,SAAUC,EAAyBP,EAAzBO,OAAQC,EAAiBR,EAAjBQ,aACjDC,EAAYF,GAAUA,EAAOG,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,OAEhEC,EAAAA,EAAAA,YAAU,YACRrB,EAAAA,EAAAA,IAAoBK,EAAMiB,UACvBC,KAAKd,GACLe,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACpB,IAEJ,IAAMuB,EAAY,oBAAGlB,EAASmB,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAC7C,OACE,UAAC,IAAD,CAAKC,GAAG,OAAR,WACE,UAAC,IAAD,CAAqBC,GAAIJ,EAAzB,WACE,SAAC,MAAD,CAAaK,KAAM,KADrB,iBAIA,UAAC,IAAD,CAAKC,QAAQ,OAAb,WACE,SAAC,IAAD,WACE,gBACEC,MAAM,MACNC,IACExB,EAAW,0CAC4BA,GACnCyB,EAENC,IAAI,YAGR,UAAC,IAAD,CAAKC,GAAI,GAAT,WACE,wBAAK1B,KACL,UAAC,IAAD,YACE,uCADF,IAC6C,GAAvB2B,OAAOxB,GAD7B,QAGA,SAAC,IAAD,yBACA,0BAAOF,KAEP,SAAC,IAAD,uBACA,0BAAOG,WAGX,UAAC,IAAD,CAAKiB,QAAQ,OAAOO,cAAc,SAAlC,WACE,SAAC,IAAD,CAAqBT,GAAG,OAAOH,MAAO,CAAEC,KAAMF,GAA9C,mBAGA,SAAC,IAAD,CAAqBI,GAAG,UAAUH,MAAO,CAAEC,KAAMF,GAAjD,yBAIF,SAAC,EAAAc,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C","sources":["fetchAPI.jsx","pages/MoviesDetaile/MoviesDetaile.jsx"],"sourcesContent":["const axios = require('axios');\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '025e6ba837c180b1375a1753437eaffc';\n\nexport const getTrendingFilms = async () => {\n  const respons = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return respons.data.results;\n};\n\nexport const getSearchFilms = async query => {\n  const respons = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return respons.data.results;\n};\n\nexport const getMovieDetailsById = async id => {\n  const respons = await axios.get(`movie/${id}?api_key=${KEY}&language=en-US`);\n  return respons.data;\n};\n\nexport const getMovieCredits = async id => {\n  const respons = await axios.get(\n    `movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const respons = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return respons.data.results;\n};\n","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Suspense } from 'react';\nimport { NavLinkMoviesDetail, TextMoviesDitail } from './MoviesDetaile.styled';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Box } from '../../components/Box';\nimport { getMovieDetailsById } from '../../fetchAPI';\nimport noPoster from '../../image/csaff-no-poster.9916655f.jpg';\nimport { BsArrowLeft } from 'react-icons/bs';\n\nconst MoviesDetaile = () => {\n  const param = useParams();\n  const [movie, setMovie] = useState([]);\n  const location = useLocation();\n  const { poster_path, original_title, overview, genres, vote_average } = movie;\n  const genresStr = genres && genres.map(({ name }) => name).join(', ');\n\n  useEffect(() => {\n    getMovieDetailsById(param.moviesId)\n      .then(setMovie)\n      .catch(err => console.log(err));\n  }, [param]);\n\n  const backLinkHref = location.state?.from ?? '/';\n  return (\n    <Box as=\"main\">\n      <NavLinkMoviesDetail to={backLinkHref}>\n        <BsArrowLeft size={26} />\n        Go to back\n      </NavLinkMoviesDetail>\n      <Box display=\"flex\">\n        <Box>\n          <img\n            width=\"200\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : noPoster\n            }\n            alt=\"foto\"\n          />\n        </Box>\n        <Box px={15}>\n          <h2>{original_title}</h2>\n          <TextMoviesDitail>\n            <b>User score:</b> {Number(vote_average) * 10}%\n          </TextMoviesDitail>\n          <TextMoviesDitail>Overview </TextMoviesDitail>\n          <span>{overview}</span>\n\n          <TextMoviesDitail>Genres </TextMoviesDitail>\n          <span>{genresStr}</span>\n        </Box>\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\">\n        <NavLinkMoviesDetail to=\"cast\" state={{ from: backLinkHref }}>\n          Cast\n        </NavLinkMoviesDetail>\n        <NavLinkMoviesDetail to=\"reviews\" state={{ from: backLinkHref }}>\n          Reviews\n        </NavLinkMoviesDetail>\n      </Box>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </Box>\n  );\n};\n\nexport default MoviesDetaile;\n"],"names":["axios","require","defaults","baseURL","KEY","getTrendingFilms","get","respons","data","results","getSearchFilms","query","getMovieDetailsById","id","getMovieCredits","cast","getMovieReviews","param","useParams","useState","movie","setMovie","location","useLocation","poster_path","original_title","overview","genres","vote_average","genresStr","map","name","join","useEffect","moviesId","then","catch","err","console","log","backLinkHref","state","from","as","to","size","display","width","src","noPoster","alt","px","Number","flexDirection","Suspense","fallback"],"sourceRoot":""}